#!/usr/bin/env python3

"""ОПИСАНИЕ:
Вам будет предоставлен массив положительных целых чисел. Массив должен быть отсортирован по количеству различных
совершенных квадратов и обратно, что может быть сгенерировано из каждого числа, пересаживающего его цифры.
Например:arr = [715, 112, 136, 169, 144]
Number   Perfect Squares w/its Digits   Amount
 715                -                       0
 112               121                      1
 136               361                      1
 169           169, 196, 961                3
 144             144, 441                   2
Таким образом, вывод будет иметь следующий порядок:[169, 144, 112, 136, 715]
Когда у нас есть два или более чисел с одинаковым количеством совершенных квадратов в их перестановках, мы сортируем по
их значениям. В приведенном выше примере мы видим, что 112 и 136 генерируют идеальный квадрат. Итак, 112 на первом месте.
Примеры этой ката:
sort_by_perfsq([715, 112, 136, 169, 144]) == [169, 144, 112, 136, 715]
# number of perfect squares:                   3    2    1    1    0
У нас могут быть в массиве числа, которые принадлежат одному и тому же набору перестановок.
sort_by_perfsq([234, 61, 16, 441, 144, 728]) == [144, 441, 16, 61, 234, 728]
# number of perfect squares:                      2    2    1   0   0    0
Особенности случайных тестов:
Количество тестов: 80
Массивы от 4 до 20 элементов
Целые цифры, включающее от 1 до 7 цифр
Наслаждайся этим!!"""

from itertools import permutations


def sort_by_perfsq2(arr):
    f = lambda a: int(a ** 0.5) == a ** 0.5
    d = dict()
    for i,a in enumerate(arr):
        t = []
        for p in permutations(str(a)):
            pn = int(''.join(p))
            if f(pn) and pn not in t:
                t.append(pn)
        l = len(t)
        if l not in d:
            d[l] = []
        d[l].append(a)
    d = dict(sorted(d.items(), key=lambda x: x[0], reverse=1))
    res = []
    for v in d.values():
        if len(v) == 1:
            res.append(v[0])
        else:
            for x in sorted(v):
                res.append(x)
    return res


def main():
    tests = [
        (sort_by_perfsq2([715, 112, 136, 169, 144]), [169, 144, 112, 136, 715]),
        (sort_by_perfsq2([234, 61, 16, 441, 144, 728]), [144, 441, 16, 61, 234, 728]),
    ]

    for t in tests:
        print(['fail', 'OK'][t[0] == t[1]])


if __name__ == "__main__":
    main()
