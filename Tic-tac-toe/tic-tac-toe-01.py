"""ОПИСАНИЕ:
Если бы мы создали игру в крестики-нолики, мы бы хотели знать, решено ли
текущее состояние доски, не так ли? Наша цель - создать функцию, которая
проверит это для нас!

Предположим, что плата имеет форму массива 3x3, где значение, если пятно
пустое, если это «X» или «O», например:012.

[[0, 0, 1],
 [0, 1, 2],
 [2, 1, 0]]
Мы хотим, чтобы наша функция вернула:
-1 если доска еще не закончена И еще никто не выиграл (есть пустые места),
1 если "Х" выиграет,
2 если «О» выиграет,
0 если это кошачья игра (т.е. ничья).
Вы можете предположить, что переданная доска действительна в контексте игры в
крестики-нолики."""


def tictactoe(board: list):
    # Проверка на 0 в позициях
    for row in board:
        if not all([x for x in row]):
            return -1

    n = len(board)
    m = len(board[0])

    # Проверка на 1 или 2 по рядам
    for i in range(n):
        k = 0
        for j in range(m):
            k = k + board[i][j]
        if k == m:
            return 1
        elif k == 2 * m:
            return 2

    # Проверка на 1 или 2 по столбцам
    for i in range(3):
        k = 0
        for j in range(3):
            k = k + board[j][i]
        if k == m:
            return 1
        elif k == 2 * m:
            return 2

    # Проверка на 1 или 2 по левой диагонали
    k = 0
    i, j = 0, 0
    while i < n:
        while j < m:
            k = k + board[i][j]
            j = j + 1
            i = i + 1
    if k == m:
        return 1
    elif k == 2 * m:
        return 2

    # Проверка на 1 или 2 по правой диагонали
    k = 0
    i, j = 0, m - 1
    while i < n:
        while j > -1:
            k = k + board[i][j]
            j = j - 1
            i = i + 1
    if k == m:
        return 1
    elif k == 2 * m:
        return 2

    # Проверка на кошачью ничью
    c1, c2 = 0, 0
    for i in range(n):
        for j in range(m):
            if board[i][j] == 1:
                c1 = c1 + 1
            elif board[i][j] == 2:
                c2 = c2 + 1
    if c1 == c2 + 1 or c2 == c1 + 1:
        return 0


def main():
    tests = [
        ([[0, 0, 1],
          [0, 1, 2],
          [2, 1, 0]], -1),  #1

        ([[1, 1, 1],
          [2, 1, 2],
          [1, 2, ]], 1),  #2

        ([[2, 2, 2],
          [2, 1, 1],
          [1, 2, 2]], 2),  #3

        ([[2, 2, 1],
          [1, 1, 1],
          [2, 1, 1]], 1),  #4

        ([[1, 2, 1],
          [2, 2, 2],
          [2, 1, 2]], 2),  #5

        ([[2, 1, 2],
          [1, 1, 2],
          [1, 1, 1]], 1),  #6

        ([[1, 2, 1],
          [2, 1, 2],
          [2, 2, 2]], 2),  #7

        ([[1, 2, 1],
          [1, 1, 2],
          [1, 2, 2]], 1),  #8

        ([[2, 1, 2],
          [2, 2, 1],
          [2, 1, 1]], 2),  #9

        ([[2, 1, 2],
          [1, 1, 2],
          [2, 1, 1]], 1),  #10

        ([[2, 2, 1],
          [1, 2, 2],
          [2, 2, 1]], 2),  #11

        ([[2, 2, 1],
          [1, 2, 1],
          [2, 1, 1]], 1),  #12

        ([[2, 1, 2],
          [1, 1, 2],
          [1, 2, 2]], 2),  #13

        ([[1, 2, 2],
          [2, 1, 1],
          [2, 2, 1]], 1),  #14

        ([[2, 2, 1],
          [1, 2, 1],
          [1, 1, 2]], 2),  #15

        ([[1, 2, 1],
          [2, 1, 1],
          [1, 2, 2]], 1),  #16

        ([[1, 2, 2],
          [2, 2, 1],
          [2, 1, 1]], 2),  #17

        ([[1, 2, 2],
          [2, 1, 1],
          [1, 1, 2]], 0)  #18
    ]
    f = tictactoe
    for n, t in enumerate(tests, 1):
        print([f'{n} fail', f'{n} OK'][f(t[0]) == t[1]])


if __name__ == "__main__":
    main()