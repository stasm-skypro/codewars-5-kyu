#! /usr/bin/env python3

"""ОПИСАНИЕ:
Мы с моим другом Джоном являемся членами клуба "Fat to Fit Club" (FFC). Джон обеспокоен, потому
что каждый месяц публикуется список с весами участников, и каждый месяц он последний в списке,
то означает, что он самый тяжелый.
Я тот, кто устанавливает список, поэтому я сказал ему: "Больше не волнуйся, я изменю порядок списка"
Было решено присвоить числам "вес". Отныне вес числа будет равен сумме его цифр.
Например, 99 будет иметь "вес" 18, 100 будет иметь "weight", 1 поэтому в списке 100 будет стоять
перед 99.
Учитывая строку с весами членов FFC в обычном порядке, можете ли вы предоставить эту строку,
упорядоченную по "весам" этих чисел?
Пример:
"56 65 74 100 99 68 86 180 90" ordered by numbers weights becomes:
"100 180 90 56 65 74 68 86 99"
Когда два числа имеют одинаковый "вес", давайте классифицируем их так, как если бы они были
строками (в алфавитном порядке), а не числами:
180 находится перед 90, поскольку, имея тот же "вес" (9), он находится перед как строка.
Все числа в списке являются положительными числами, и список может быть пустым.
Примечания
может случиться так, что входная строка содержит начальные и конечные пробелы и более одного
уникального пробела между двумя последовательными числами
Для C: результат освобождается."""


def get_order2(strng: str):
    order = dict()
    for d in strng.split():
        w = sum([int(x) for x in d])
        if w not in order:
            order[w] = []
        order[w].append(d)

    sorted_order = dict(sorted(order.items()))
    ans = []
    for k, v in sorted_order.items():
        ans.extend(sorted(sorted_order[k]))

    return " ".join(ans)


def get_order(string: str):
    """Решение учителя."""
    sorted_list = sorted(sorted(string.split()), key=get_weight)
    return " ".join(sorted_list)


def get_weight(d):
    return sum([int(x) for x in d])


def main():
    tests = [
        (get_order("56 65 74 100 99 68 86 180 90"), "100 180 90 56 65 74 68 86 99"),
        (get_order("103 123 4444 99 2000"), "2000 103 123 4444 99"),
        (get_order("2000 10003 1234000 44444444 9999 11 11 22 123"),
         "11 11 2000 10003 22 123 1234000 44444444 9999")
    ]
    for t in tests:
        print(['failed', 'passed'][t[0] == t[1]], t[0])


if __name__ == "__main__":
    main()
