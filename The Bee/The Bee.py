#!/usr/bin/env python3

"""The Bee.

Описание:
Представьте себе пчелиные соты - поле из шестиугольных ячеек со стороной N.
В верхней левой ячейке A есть пчела. За одно движение она может проползти на одну ячейку вниз,
на одну ячейку вниз-вправо или на одну ячейку вверх-вправо (пчела не ползет вверх и влево).
Напишите функцию, которая выводит количество способов, которыми пчела может переползти из ячейки A
в противоположную ячейку B.

Входные данные:
Функция получает единственное число N - размер шестиугольного поля 2 ≤ N ≤ 200.

Выходные данные:
Функция должна выводить одно целое число - количество способов.

Пример:
the_bee(2) --> 11
the_bee(3) --> 291
the_bee(5) --> 259123."""

from time import perf_counter
cnt = 0


def the_bee(n):
    # Найдём количество ячеек m для заданного числа рёбер n.
    m = 1
    for i in range(1, n + 1):
        m = m + 6 * (i - 1)
    # Построим граф, соотвествующий найденному значению m.
    start_pos = None
    final_pos = None
    if m == 7:
        g = {
            '0': ['3', '4', '5'],
            '1': ['2', '0', '6'],
            '2': ['3', '0'],
            '3': ['4'],
            '4': [],
            '5': ['4'],
            '6': ['0', '5'],
        }
        start_pos = '1'
        final_pos = '4'
    elif m == 19:
        g = {
            '0': ['1', '2', '3'],
            '1': ['4', '5', '2'],
            '2': ['5', '6', '7'],
            '3': ['2', '7', '8'],
            '4': ['9', '5'],
            '5': ['9', '10', '6'],
            '6': ['10', '11', '12'],
            '7': ['6', '12', '13'],
            '8': ['7', '13'],
            '9': ['14', '10'],
            '10': ['14', '15', '11'],
            '11': ['15', '16', '17'],
            '12': ['11', '17', '18'],
            '13': ['12', '18'],
            '14': ['15'],
            '15': ['16'],
            '16': [],
            '17': ['16'],
            '18': ['17'],
        }
        start_pos = '0'
        final_pos = '16'

    def dfs(graph, visited, start, finish):
        """Поиск всех возможных путей из точки start в точку finish методом поиска в глубину."""
        global cnt
        if start == finish:
            cnt += 1
            return
        visited += [start]
        for neighbour in graph[start]:
            if neighbour not in visited:
                dfs(graph, visited, neighbour, finish)
        visited.remove(start)

    dfs(g, [], start_pos, final_pos)
    print(cnt)
    return cnt


def main():
    start = perf_counter()
    tests = [
        (the_bee(2), 11),
        (the_bee(3), 291),
        # (the_bee(5), 259123),
        # (the_bee(20), 11419120154603538332020717795),
        # (the_bee(33), 706829476133138423874525925298446150375545319299),
        # (the_bee(50), 61068096560504518254246449553519425203436341865056944755649047832571626123),
    ]
    for t in tests:
        print(['fail', 'OK'][t[0] == t[1]])
    print(f">>>code runs in: {(perf_counter() - start):.06f}")


if __name__ == "__main__":
    main()
