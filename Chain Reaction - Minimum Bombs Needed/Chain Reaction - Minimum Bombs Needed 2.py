#!/usr/bin/env python3

"""ОПИСАНИЕ:
Это продолжение Chain Reaction - Explosions с теми же настройками, но с другим
вкусом. Как и в предыдущей части, вам будет предоставлен прямоугольный массив,
представляющий "карту" с тремя типами пробелов:

бомбы "+": при активации их взрыв активирует любые бомбы непосредственно над,
под, слева или справа от бомбы "+".
бомбы "x": при активации их взрыв активирует любые бомбы, размещенные в любом
из четырех диагональных направлений рядом с бомбой "x".
Пустые пробелы "0".

Цель проста: получив карту, верните минимальное количество бомб, которые
необходимо взорвать, чтобы все бомбы были уничтожены в результате цепной
реакции.
Давайте рассмотрим несколько примеров:
[
["+", "+", "+", "0", "+", "+", "+"],
["+", "+", "+", "0", "0", "+", "+"]
]
Для карты выше ответ таков 2; чтобы взорвать все бомбы, вам просто нужно
взорвать одну бомбу "+" в правом кластере и одну в левом кластере.
[
["x", "0", "x"],
["x", "x", "x"]
]
Для карты выше ответ таков 3; очевидно, что достаточно установить три нижние
бомбы "x", и не менее трех бомб будет достаточно.
[
["x", "x", "x", "0", "x"],
["x", "x", "x", "x", "x"],
["x", "x", "x", "0", "x"]
]
Для карты выше ответ таков 3; срабатывание трех крайних правых бомб в среднем
ряду сделает свое дело.

Примеры
min_bombs_needed([
["+", "+", "+", "0", "+", "+", "+"],
["+", "+", "+", "0", "0", "+", "+"]
]) ➞ 2

min_bombs_needed([
["x", "0", "x"],
["x", "x", "x"]
]) ➞ 3

min_bombs_needed([
["x", "x", "x", "0", "x"],
["x", "x", "x", "x", "x"],
["x", "x", "x", "0", "x"]
]) ➞ 3
Примечания
Обратите внимание, что как бомбы "+", так и бомбы "x" имеют "дальность взрыва",
равную 1.
"""
from collections import deque


def make_border(a: list):
    a.insert(0, ['0' for _ in range(len(a[0]))])
    a.append(['0' for _ in range(len(a[0]))])
    for row in a:
        row.insert(0, '0')
        row.append('0')
    return a


def pprint(matr):
    for row in matr:
        print(row)


def get_min_bombs(a: list):
    n, m = len(a), len(a[0])

    # add border to array
    a = make_border(a)

    incp = deque([(0, 0), (0, 1), (1, 0), (-1, 0), (0, -1)])
    c = 0
    init_pos = 1, 1
    _i, _j = init_pos
    for i in range(_i, n + 1):
        for j in range(_j, m + 1):
            cur = a[i][j]
            if cur != '0':
                if cur == '+':
                    pos = i, j
                    for _ in range(len(incp)):
                        di, dj = incp[0]
                        i, j = i + di, j + dj
                        if a[i][j] != '0':
                            a[i][j] = '~'
                        incp.rotate()
                        i, j = pos
                elif cur == 'x':
                    pass
            else:
                if init_pos == (_i, _j):
                    init_pos = i, j
                break
    c = c + 1
    pprint(a)
    return c


def main():
    tests = [
        # ([["+", "+", "0", "+", "+"],
        #   ["+", "+", "+", "+", "+"]], 1),

        # ([["+", "+", "+", "0", "+", "+", "+"],
        #   ["+", "+", "+", "0", "0", "+", "+"]], 2),

        # ([["+", "+", "0", "+", "0", "+", "+", "+"],
        #   ["+", "+", "0", "+", "0", "0", "+", "+"]], 3),

        # ([["+", "0", "+", "0", "+", "0", "+"],
        #   ["+", "+", "+", "+", "+", "+", "+"]], 1),

        # ([["+", "0", "+", "+", "+", "+", "+"],
        #   ["+", "+", "+", "0", "0", "+", "+"]], 1),

        # ([['0', '+', '+', '0', '+', '0', '+'],
        #   ['0', '0', '+', '0', '+', '0', '+'],
        #   ['0', '+', '+', '0', '+', '0', '+']], 3),

        # ([['+', '+', '+', '0', '+', '+', '+'],
        #   ['+', '+', '+', '0', '+', '+', '+'],
        #   ['+', '+', '0', '+', '+', '+', '+'],
        #   ['+', '+', '+', '0', '+', '+', '+'],
        #   ['+', '+', '+', '+', '0', '+', '+'],
        #   ['+', '+', '+', '+', '0', '+', '+']], 2),

        ([['+', '+', '+', '0', '+', '+', '+'],
          ['+', '+', '+', '0', '+', '+', '+'],
          ['+', '+', '0', '+', '0', '+', '+'],
          ['+', '+', '+', '0', '+', '+', '+'],
          ['+', '+', '0', '+', '0', '+', '+'],
          ['+', '+', '0', '+', '0', '+', '+']], 4),

        # ([["x", "0", "x"],
        #   ["x", "x", "x"]], 3),

        # ([["x", "x", "x", "0", "x"],
        #   ["x", "x", "x", "x", "x"],
        #   ["x", "x", "x", "0", "x"]], 3),

        # ([["x", "0", "x"],
        #   ["x", "x", "x"]], 3),

        # ([["x", "x", "x", "0", "x"],
        #   ["x", "x", "x", "x", "x"],
        #   ["x", "x", "x", "0", "x"]], 3)
    ]
    for t in tests:
        res = get_min_bombs(t[0])
        print(["fail", "passed"][res == t[1]], res)


if __name__ == "__main__":
    main()
