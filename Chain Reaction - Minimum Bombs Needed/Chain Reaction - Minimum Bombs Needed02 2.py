#!/usr/bin/env python3

"""ОПИСАНИЕ:
Это продолжение Chain Reaction - Explosions с теми же настройками, но с другим
вкусом. Как и в предыдущей части, вам будет предоставлен прямоугольный массив,
представляющий "карту" с тремя типами пробелов:

Бомбы "+": при активации их взрыв активирует любые бомбы непосредственно над,
под, слева или справа от бомбы "+".
Бомбы "x": при активации их взрыв активирует любые бомбы, размещенные в любом
из четырех диагональных направлений рядом с бомбой "x".
Пустые пробелы "0".

Цель проста: получив карту, верните минимальное количество бомб, которые
необходимо взорвать, чтобы все бомбы были уничтожены в результате цепной
реакции.
Давайте рассмотрим несколько примеров:
[
["+", "+", "+", "0", "+", "+", "+"],
["+", "+", "+", "0", "0", "+", "+"]
]
Для карты выше ответ таков 2; чтобы взорвать все бомбы, вам просто нужно
взорвать одну бомбу "+" в правом кластере и одну в левом кластере.
[
["x", "0", "x"],
["x", "x", "x"]
]
Для карты выше ответ таков 3; очевидно, что достаточно установить три нижние
бомбы "x", и не менее трех бомб будет достаточно.
[
["x", "x", "x", "0", "x"],
["x", "x", "x", "x", "x"],
["x", "x", "x", "0", "x"]
]
Для карты выше ответ таков 3; срабатывание трех крайних правых бомб в среднем
ряду сделает свое дело.

Примеры
min_bombs_needed([
["+", "+", "+", "0", "+", "+", "+"],
["+", "+", "+", "0", "0", "+", "+"]
]) ➞ 2

min_bombs_needed([
["x", "0", "x"],
["x", "x", "x"]
]) ➞ 3

min_bombs_needed([
["x", "x", "x", "0", "x"],
["x", "x", "x", "x", "x"],
["x", "x", "x", "0", "x"]
]) ➞ 3
Примечания
Обратите внимание, что как бомбы "+", так и бомбы "x" имеют "дальность взрыва",
равную 1.
"""

"""MY COMMENT: Алгоритм работает для бомб типа '+'. для бомб типа 'x' алгоритм
ещё не реализован."""

from collections import deque


def pprint(matr: list) -> None:
    for row in matr:
        print(row)


def find_bomb(arr: list, symbol: str) -> tuple:
    for i, row in enumerate(arr):
        for j, el in enumerate(row):
            if el == symbol:
                return i, j
    return -1, -1


def blow_bombs(a: list, bomb_pos: tuple, c: int):
    incrp = deque([(0, 0), (0, 1), (1, 0), (-1, 0), (0, -1)])

    blowed = [bomb_pos]
    zeros = []
    k = 0
    while k < len(blowed):
        current_pos = blowed[k]
        i, j = current_pos
        for _ in range(len(incrp)):
            di, dj = incrp[0]
            i, j = i + di, j + dj
            if len(a) > i >= 0 and len(a[i]) > j >= 0:
                if a[i][j] == '+':
                    a[i][j] = '~'
                    if (i, j) not in blowed:
                        blowed.append((i, j))
                elif a[i][j] == '0':
                    if (i, j) not in zeros:
                        zeros.append((i, j))
            incrp.rotate(-1)
            i, j = current_pos
        k = k + 1
    c = c + 1
    return c, a


def get_min_bombs(a: list):
    c = -1
    bomb_pos = (0, 0)
    while bomb_pos != (-1, -1):
        bomb_pos = find_bomb(a, '+')
        c, a = blow_bombs(a, bomb_pos, c)
    return c


def main():
    tests = [
        ([["+", "+", "0", "+", "+"],
          ["+", "+", "+", "+", "+"]], 1),

        ([["+", "+", "+", "0", "+", "+", "+"],
          ["+", "+", "+", "0", "0", "+", "+"]], 2),

        ([["+", "+", "0", "+", "0", "+", "+", "+"],
          ["+", "+", "0", "+", "0", "0", "+", "+"]], 3),

        ([["+", "0", "+", "0", "+", "0", "+"],
          ["+", "+", "+", "+", "+", "+", "+"]], 1),

        ([["+", "0", "+", "+", "+", "+", "+"],
          ["+", "+", "+", "0", "0", "+", "+"]], 1),

        ([['0', '+', '+', '0', '+', '0', '+'],
          ['0', '0', '+', '0', '+', '0', '+'],
          ['0', '+', '+', '0', '+', '0', '+']], 3),

        ([["+", "+", "+", "+", "+", "+", "+"],
          ['0', '0', '+', '0', '0', '0', '0'],
          ['0', '0', '+', '0', '0', '0', '0'],
          ["0", "0", "+", "+", "+", "+", "+"]], 1),

        ([['+', '+', '0', '+', '+'],
          ['+', '0', '+', '0', '+'],
          ['+', '+', '0', '+', '+']], 3),

        ([['+', '+', '+', '0', '+', '+', '+'],
          ['+', '+', '+', '0', '+', '+', '+'],
          ['+', '+', '0', '+', '+', '+', '+'],
          ['+', '+', '+', '0', '+', '+', '+'],
          ['+', '+', '+', '+', '0', '+', '+'],
          ['+', '+', '+', '+', '0', '+', '+']], 2),

        ([['+', '+', '+', '0', '+', '+', '+'],
          ['+', '+', '+', '0', '+', '+', '+'],
          ['+', '+', '0', '+', '0', '+', '+'],
          ['+', '+', '+', '0', '+', '+', '+'],
          ['+', '+', '0', '+', '0', '+', '+'],
          ['+', '+', '0', '+', '+', '+', '+']], 3),

        # ([["x", "0", "x"],
        #   ["x", "x", "x"]], 3),

        # ([["x", "x", "x", "0", "x"],
        #   ["x", "x", "x", "x", "x"],
        #   ["x", "x", "x", "0", "x"]], 3),

        # ([["x", "0", "x"],
        #   ["x", "x", "x"]], 3),

        # ([["x", "x", "x", "0", "x"],
        #   ["x", "x", "x", "x", "x"],
        #   ["x", "x", "x", "0", "x"]], 3)
    ]
    for t in tests:
        res = get_min_bombs(t[0])
        print(["fail", "passed"][res == t[1]], res)


if __name__ == "__main__":
    main()
