#! /usr/bin/env python3

"""ОПИСАНИЕ:
На чертеже показаны 6 квадратов, стороны которых имеют длину 1, 1, 2, 3, 5, 8. Легко видеть,
что сумма периметров этих квадратов равна : 4 * (1 + 1 + 2 + 3 + 5 + 8) = 4 * 20 = 80 
Не могли бы вы указать сумму периметров всех квадратов в прямоугольнике, когда имеется
n + 1 квадратов, расположенных таким же образом, как на чертеже:
Подсказка:
Смотрите последовательность Фибоначчи
Ссылка:
http://oeis.org/A000045
Функция perimeter имеет параметр n, где n + 1 - количество квадратов (они пронумерованы от 0 до n)
и возвращает общий периметр всех квадратов.
perimeter(5) should return 80
perimeter(7) should return 216."""


def sum_perimeter1(n):
    """Решение учителя."""
    a, b = 1, 2
    while n:
        a, b = b, a + b
        n = n - 1
    return 4 * (b - 1)


def sum_perimeter(n):
    a = b = 1
    p = 2
    for _ in range(2, n + 1):
        a, b = b, a + b
        p = p + b
    return p * 4


def run():
    func = sum_perimeter
    tests = [
        (func(5), 80),
        (func(7), 216),
        (func(20), 114624),
        (func(30), 14098308),
        (func(100), 6002082144827584333104),
        (func(500),
         2362425027542282167538999091770205712168371625660854753765546783141099308400948230006358531927265833165504),
    ]
    for t in tests:
        print(['fail', 'OK'][t[0] == t[1]])


if __name__ == "__main__":
    run()
